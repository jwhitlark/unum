$ mkdir -p net/dishevelled

$ cat > net/dishevelled/hello.clj
(ns net.dishevelled.hello
  (:gen-class :main true))

(defn -main []
  (println "Hello, world!"))

$ mkdir classes

$ java -cp /usr/local/lib/clojure.jar:classes:. clojure.main -e "(compile 'net.dishevelled.hello)" net.dishevelled.hello

$ java -cp /usr/local/lib/clojure.jar:classes:. net.dishevelled.hello
Hello, world!

$ (cd classes; jar xf /usr/local/lib/clojure.jar)

$ jar cfe hello.jar net.dishevelled.hello -C classes .

$ java -jar hello.jar

Hello, world!


Loading image from jar

images is a top level dir in the jar

How to read:
java.net.URL imageURL = myDemo.class.getResource("images/myImage.gif");
...
if (imageURL != null) {
    ImageIcon icon = new ImageIcon(imageURL);

How to compile:
?


hooks and events:

events are just keywords, :host-joined

(def event-queue (ref []))
(def event-dispatch (ref {}))

In transaction, conj event to event-queue

A single thread reads event-queue, blocking if it's empty.  When it
gets an event, it looks it up in event-dispatch, and calls all the
functions, (if any), that are in the list.

(defn run-hook []
  (apply pcalls (@event-dispatch hook)))

(create-hook hook)
(add-hook hook fn)
(remove-hook hook fn?)
(clear-hook hook)

Hooks:
:host-joined-hook
:host-registered-hook
:host-disconnected-hook
:kill-unum-hook

Will there be such a thing as abnormal hooks?


defining advice macro...

(def func-name-before (ref []))
(def func-name-after (ref []))
(call-all-func-name-after (defn func-name [(call-all-func-name-before]
  (body))))



(defadvice func-name []
  body)

(add-advice-before func-name func)
->
(dosync (alter func-name-before conj func))

; This works, as far as it goes...
(defmacro defadvice [func-name args body]
  (list 'def (symbol (str *ns*) (str func-name "-before")) '(ref [])))
